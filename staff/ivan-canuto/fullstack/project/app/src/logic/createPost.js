import { validators, errors } from 'com'
import context from './context'

const { validateText, validateId } = validators

/**
 * Creates a post by reciving a summary, consisting in a text related to a topic.
 * 
 * @param {string} _summary The summarized text of a conversation generated by the API.
 * @param {string} conversationId The conversation id.
 * 
 * @returns {Promise} A Promise that resolves when a post is created successfully, or throws an error if the post creation fails
 * 
 * @throws {TypeError} On non-string conversation id or summary text
 * @throws {ContentError} On conversation id length not equal to 24 characters, or empty summary text
 */

export default function createPost (_summary, conversationId) {
  validateText(_summary, 'summary text')
  validateId(conversationId, 'conversation id')

  const summary = _summary.trim()

  return (async () => {
    const res = await fetch(`${import.meta.env.VITE_API_URL}/users/conversations/${conversationId}/newPost`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${context.token}`
      },
      body: JSON.stringify({ summary })
    })

    if(res.status === 200)
      return
    
    const { type, message } = await res.json()

    const clazz = errors[type]

    throw new clazz(message)
  })()
}
